# Provide continuous delivery (CD) for CUDA-enabled builds.
#
# CD deliverables currently include:
# - (natively) built Python wheel distributions (for PyPI);
# - (natively) built Conda packages (for Anaconda).
#
name: continuous-delivery-cuda

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'
      - 'v[0-9]+.[0-9]+.[0-9]+.post[0-9]+'
      - 'v[0-9]+.[0-9]+.[0-9]+.dev[0-9]+'
      - 'v[0-9]+.[0-9]+.[0-9]+rc[0-9]+'
    paths:
      - deploy/pkg/conda_recipe_cuda/**
      - .github/workflows/cd_cuda.yml
  workflow_dispatch:
    inputs:
      run_build_bdist_cuda:
        description: 'Run job build_bdist_cuda'
        type: boolean
        default: false
        required: false
      run_build_conda_cuda:
        description: 'Run job build_conda_cuda'
        type: boolean
        default: false
        required: false
      version_tag:
        description: 'Version tag for delivery'
        type: string
        required: false

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build_bdist_cuda:
    name: Build bdist wheel (CUDA)

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]

    runs-on: ${{ matrix.os }}

    timeout-minutes: 100

    # Allow manual trigger from inputs.
    if: >
      github.event_name != 'workflow_dispatch' ||
      github.event.inputs.run_build_bdist_cuda == 'true'

    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Set up Python 3
        uses: actions/setup-python@v6
        with:
          python-version: '3.x'

      - name: Install packaging requirements
        run: python -m pip install --upgrade twine

      - name: Copy Python project configuration file
        run: cp deploy/pkg/pyproject/.pyproject_cuda.toml pyproject.toml

      - name: Build built distribution
        uses: pypa/cibuildwheel@v3.2.1
        with:
          package-dir: .
          output-dir: dist/
          config-file: pyproject.toml

      - name: Verify built distribution
        run: python -m twine check --strict dist/*

      - name: Save wheel to bdist
        uses: actions/upload-artifact@v4
        with:
          name: bdist_whl_${{ matrix.os }}_${{ github.ref_name }}_cuda
          path: dist/*.whl

      - name: Save wheel to pypi_dist
        uses: actions/upload-artifact@v4
        with:
          name: pypi_dist_${{ runner.os }}_${{ runner.arch }}_${{ github.ref_name }}_cuda
          path: dist/*.whl

  build_conda_cuda:
    name: Build Conda package (CUDA)

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]

    runs-on: ${{ matrix.os }}

    timeout-minutes: 120

    if: >
      github.event_name != 'workflow_dispatch' ||
      github.event.inputs.run_build_conda_cuda == 'true'

    defaults:
      run:
        shell: bash -el {0}

    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Set up (Mini)conda
        uses: conda-incubator/setup-miniconda@v3
        with:
          activate-environment: conda_bld
          channels: conda-forge,nvidia
          channel-priority: strict
          architecture: ${{ env.TARGET_ARCH }}

      - name: Install packaging requirements
        run: |
          conda install -y conda-build conda-verify conda-package-handling
          # `cph` not found otherwise.
          conda_root=$(conda config --show root_prefix | sed 's/root_prefix: //')
          conda_env=${conda_root}/envs/conda_bld
          export PATH="$PATH:${conda_root}/bin:${conda_env}/bin"

      - name: Override version
        if: github.event_name == 'workflow_dispatch'
        env:
          recipe_file: deploy/pkg/conda_recipe_cuda/meta.yaml
        run: |
          vers_tag=${{ github.event.inputs.version_tag }}
          if [[ ! -z ${vers_tag} ]]; then
            sed -i "s/# git_rev:.*/git_rev: ${vers_tag}/g" ${recipe_file}
          fi

      - name: Build Conda package
        env:
          recipe_dir: deploy/pkg/conda_recipe_cuda
          output_dir: dist/
          variants: "{'python': ['3.10', '3.11', '3.12', '3.13']}"
        run: |
          # Create output directory if non-existent.
          if [[ ! -d ${output_dir} ]]; then mkdir -p ${output_dir}; fi
          # Build.
          conda build --strict-verify --no-anaconda-upload ${recipe_dir} \
            --variants "${variants}" --output-folder ${output_dir}
          # Transmute.
          find ${output_dir} -name '*.tar.bz2' \
            -exec cph transmute {} .conda --out-folder ${output_dir} \;

      - name: Save build to conda_bld
        uses: actions/upload-artifact@v4
        with:
          name: conda_bld_${{ matrix.os }}_${{ github.ref_name }}_cuda
          path: dist/*

      - name: Save build to conda_dist
        uses: actions/upload-artifact@v4
        with:
          name: conda_dist_${{ runner.os }}_${{ runner.arch }}_${{ github.ref_name }}_cuda
          path: |
            dist/**/*.tar.bz2
            dist/*.conda
