# Provide continuous delivery (CD) for target platforms
# from non-native build platforms.
#
# CD deliverables for target platforms (ARM64-based):
# - (non-natively) built Python wheel distributions (for PyPI);
# - (non-natively) built Conda packages (for Anaconda).
#
name: continuous-delivery-xplatform

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'
      - 'v[0-9]+.[0-9]+.[0-9]+.post[0-9]+'
      - 'v[0-9]+.[0-9]+.[0-9]+rc[0-9]+'
    paths:
      - deploy/pkg/conda_recipe_xp/**
      - .github/workflows/cd_xp.yml
  workflow_dispatch:
    inputs:
      run_build_bdist_xplat:
        description: 'Run job build_bdist_xplat'
        type: boolean
        default: false
        required: false
      run_build_conda_xplat:
        description: 'Run job build_conda_xplat'
        type: boolean
        default: false
        required: false
      version_tag:
        description: 'Version tag for delivery'
        type: string
        required: false

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build_bdist_xplat:
    name: Build bdist wheel

    strategy:
      fail-fast: false
      matrix:
        # Use oldest supported OS for backward compatibility.
        os: [ubuntu-20.04, macos-11]

    runs-on: ${{ matrix.os }}

    timeout-minutes: 120

    # Allow manual trigger from inputs.
    if: >
      github.event_name != 'workflow_dispatch' ||
      github.event.inputs.run_build_bdist_xplat == 'true'

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      # Use QEMU for non-native Linux runner.
      - name: Set up QEMU (Linux)
        if: runner.os == 'Linux'
        uses: docker/setup-qemu-action@v2
        with:
          # Specify target architecture (ARM64).
          platforms: linux/arm64

      # Adapt Homebrew for non-native macOS runner.
      - name: Set up Homebrew (macOS)
        if: runner.os == 'macOS'
        run: |
          # (Re-)install (OpenMP) dependency formulae
          # to match target platform (ARM64-based).
          TARG_PLAT=arm64_big_sur
          for formula in gsl fftw; do
            brew fetch --force --bottle-tag=${TARG_PLAT} $formula
            brew install $(brew --cache --bottle-tag=${TARG_PLAT} $formula)
          done
          for formula in gcc libomp; do
            brew fetch --force --bottle-tag=${TARG_PLAT} $formula
            brew reinstall $(brew --cache --bottle-tag=${TARG_PLAT} $formula)
          done

      - name: Install packaging requirements
        run: python -m pip install --upgrade twine

      - name: Build built distribution
        uses: pypa/cibuildwheel@v2.13.1
        with:
          package-dir: .
          output-dir: dist_arm64/
          config-file: pyproject.toml
        env:
          # Specify target architecture (ARM64).
          CIBW_ARCHS_LINUX: aarch64
          CIBW_ARCHS_MACOS: arm64
          # Default to LLVM compiler and OpenMP on macOS.
          CIBW_ENVIRONMENT_MACOS: >-
            PY_CXX=$(brew --prefix llvm@15)/bin/clang++
            PY_CXXFLAGS=-I$(brew --prefix)/include
            PY_LDFLAGS=-L$(brew --prefix)/lib
            PY_OMP=1
            PY_CXXFLAGS_OMP="-I$(brew --prefix libomp)/include -fopenmp"
            PY_LDFLAGS_OMP="-L$(brew --prefix libomp)/lib -lomp"
          # # Switch to GCC compiler and OpenMP on macOS.
          # CIBW_ENVIRONMENT_MACOS: >-
          #   PY_CXX=$(find $(brew --prefix gcc)/bin -type f -name 'g++*')
          #   PY_CXXFLAGS=-I$(brew --prefix)/include
          #   PY_LDFLAGS=-L$(brew --prefix)/lib

      - name: Verify built distribution
        uses: knicknic/os-specific-run@v1.0.4
        with:
          # BUG: ``twine check`` fails to recognise ``--strict`` on macOS.
          linux: python -m twine check --strict dist_arm64/*
          macos: python -m twine check dist_arm64/*

      - name: Save wheel to bdist
        uses: actions/upload-artifact@v3
        with:
          name: bdist_wheel_arm64_${{ github.ref_name }}
          path: dist_arm64/*.whl

      - name: Save wheel to pypi_dist
        uses: actions/upload-artifact@v3
        with:
          name: pypi_dist_arm64_${{ github.ref_name }}
          path: dist_arm64/*.whl

  build_conda_xplat:
    name: Build Conda package

    strategy:
      fail-fast: false
      matrix:
        # Use oldest supported OS for backward compatibility.
        os: [ubuntu-20.04, macos-11]

    runs-on: ${{ matrix.os }}

    timeout-minutes: 120

    # Allow manual trigger from inputs (skip with ``&& false``).
    if: >
      github.event_name != 'workflow_dispatch' ||
      github.event.inputs.run_build_conda_xplat == 'true'

    defaults:
      run:
        shell: bash -el {0}

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up (Mini)conda
        uses: conda-incubator/setup-miniconda@v2
        with:
          activate-environment: conda_bld
          channels: conda-forge
          channel-priority: strict
          # # Specify architecture.
          # architecture: ${{ matrix.arch }}

      - name: Install packaging requirements
        run: |
          conda install -y conda-build conda-verify conda-package-handling
          # `cph` not found otherwise.
          conda_root=$(conda config --show root_prefix | sed 's/root_prefix: //')
          conda_env=${conda_root}/envs/conda_bld
          export PATH=$PATH:${conda_root}/bin:${conda_env}/bin

      - name: Override version
        if: github.event_name == 'workflow_dispatch'
        uses: knicknic/os-specific-run@v1.0.4
        env:
          recipe_file: deploy/pkg/conda_recipe_xp/meta.yaml
        with:
          linux: |
            vers_tag=${{ github.event.inputs.version_tag }}
            if [[ ! -z ${vers_tag} ]]; then
              sed -i "s/# git_rev:.*/git_rev: ${vers_tag}/g" ${recipe_file}
            fi
          macos: |
            vers_tag=${{ github.event.inputs.version_tag }}
            if [[ ! -z ${vers_tag} ]]; then
              sed -i '' "s/# git_rev:.*/git_rev: ${vers_tag}/g" ${recipe_file}
            fi

      - name: Build Conda package
        env:
          recipe_dir: deploy/pkg/conda_recipe_xp
          output_dir: dist_arm64/
          variants: "{'python': ['3.8', '3.9', '3.10', '3.11']}"
        run: |
          # Create output directory if non-existent.
          if [[ ! -d ${output_dir} ]]; then mkdir -p ${output_dir}; fi
          # Build.
          conda-build --strict-verify --no-anaconda-upload ${recipe_dir} \
            --variants "${variants}" --output-folder ${output_dir}
          # Transmute.
          find ${output_dir} -name "*.tar.bz2" \
            -exec cph transmute {} .conda --out-folder ${output_dir} \;

      - name: Save build to conda_bld
        uses: actions/upload-artifact@v3
        with:
          name: conda_bld_arm64_${{ github.ref_name }}
          path: dist_arm64/*

      - name: Save build to conda_dist
        uses: actions/upload-artifact@v3
        with:
          name: conda_dist_arm64_${{ github.ref_name }}
          path: |
            dist_arm64/**/*.tar.bz2
            dist_arm64/*.conda
