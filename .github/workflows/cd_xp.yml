# Provide continuous delivery (CD) for target platforms
# from non-native build platforms.
#
# CD deliverables for target platforms:
# - (non-natively) built Python wheel distributions (for PyPI);
# - (non-natively) built Conda packages (for Anaconda).
#
name: continuous-delivery-xplatform

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'
      - 'v[0-9]+.[0-9]+.[0-9]+.post[0-9]+'
      - 'v[0-9]+.[0-9]+.[0-9]+.dev[0-9]+'
      - 'v[0-9]+.[0-9]+.[0-9]+rc[0-9]+'
    paths:
      - deploy/pkg/conda_recipe_xp/**
      - .github/workflows/cd_xp.yml
  workflow_dispatch:
    inputs:
      run_build_bdist_xplat:
        description: 'Run job build_bdist_xplat'
        type: boolean
        default: false
        required: false
      run_build_conda_xplat:
        description: 'Run job build_conda_xplat'
        type: boolean
        default: false
        required: false
      version_tag:
        description: 'Version tag for delivery'
        type: string
        required: false

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build_bdist_xplat:
    name: Build bdist wheel

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]

    runs-on: ${{ matrix.os }}

    timeout-minutes: 180

    # Allow manual trigger from inputs
    # (skip automatic trigger with ``&& false``).
    if: >
      github.event_name != 'workflow_dispatch' ||
      github.event.inputs.run_build_bdist_xplat == 'true'

    steps:
      - name: Extract platform architecture
        run: |
          if [[ $(uname -m) == 'arm64' ]]; then
            echo "TARGET_ARCH=x86_64" >> "${GITHUB_ENV}"
            echo "TARGET_ARCH_ALT=x86_64" >> "${GITHUB_ENV}"
          elif [[ $(uname -m) == 'x86_64' ]]; then
            echo "TARGET_ARCH=arm64" >> "${GITHUB_ENV}"
            echo "TARGET_ARCH_ALT=aarch64" >> "${GITHUB_ENV}"
          fi

      # HACK: GitHub macOS runner image version (for deployment target).
      - name: Extract runner image version (macOS only)
        if: runner.os == 'macOS'
        run: >-
          echo "IMAGE_VERSION=$(sw_vers --productVersion | cut -d '.' -f 1).0"
          >> "${GITHUB_ENV}"

      # HACK: GitHub macOS runner defaults to a broken release of Xcode.
      # See https://github.com/actions/runner-images/issues/9273.
      - name: Pin Xcode version (macOS only)
        if: runner.os == 'macOS'
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable

      - name: Checkout (automatic trigger)
        if: github.event_name != 'workflow_dispatch'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Checkout (manual trigger)
        if: >
          github.event.inputs.run_build_bdist_xplat == 'true' &&
          github.event.inputs.version_tag == ''
        uses: actions/checkout@v4
        with:
          fetch-tags: true

      - name: Checkout (manual trigger with tag)
        if: >
          github.event.inputs.run_build_bdist_xplat == 'true' &&
          github.event.inputs.version_tag != ''
        uses: actions/checkout@v4
        with:
          ref: refs/tags/${{ github.event.inputs.version_tag }}

      # Use QEMU for non-native Linux runner.
      - name: Set up QEMU (Linux)
        if: runner.os == 'Linux'
        uses: docker/setup-qemu-action@v3
        with:
          # Specify target architecture.
          platforms: linux/${{ env.TARGET_ARCH }}

      # Adapt Homebrew for non-native macOS runner.
      - name: Set up Homebrew (macOS only)
        if: runner.os == 'macOS'
        run: |
          # (Re-)install (OpenMP) dependency formulae to match target platform.
          TARG_PLAT=${{ env.TARGET_ARCH }}_big_sur
          for formula in gsl fftw; do
            brew fetch --force --bottle-tag=${TARG_PLAT} $formula
            brew install $(brew --cache --bottle-tag=${TARG_PLAT} $formula)
          done
          for formula in gcc libomp; do
            brew fetch --force --bottle-tag=${TARG_PLAT} $formula
            brew reinstall $(brew --cache --bottle-tag=${TARG_PLAT} $formula)
          done

      - name: Set up Python 3
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install packaging requirements
        run: python -m pip install --upgrade twine

      - name: Install (pre-)compiled dependencies (macOS only)
        if: runner.os == 'macOS'
        run: |
          bash deploy/pkg/buildwheel_deps_macos.sh
          if [[ $(uname -m) == 'arm64' ]]; then
            echo "MACOSX_VERS_MIN=11.0" >> "${GITHUB_ENV}"
          elif [[ $(uname -m) == 'x86_64' ]]; then
            echo "MACOSX_VERS_MIN=10.15" >> "${GITHUB_ENV}"
          fi

      - name: Copy Python project configuration file
        run: cp .pyproject.toml pyproject.toml

      - name: Build built distribution
        uses: pypa/cibuildwheel@v2.21.1
        with:
          package-dir: .
          output-dir: dist/
          config-file: pyproject.toml
        env:
          # Specify target architecture.
          CIBW_ARCHS_LINUX: ${{ env.TARGET_ARCH_ALT }}
          CIBW_ARCHS_MACOS: ${{ env.TARGET_ARCH }}
          # # Default to LLVM compiler and OpenMP on macOS.
          # CIBW_ENVIRONMENT_MACOS: >-
          #   PY_CXX=$(brew --prefix llvm@15)/bin/clang++
          #   PY_CXXFLAGS=-I$(brew --prefix)/include
          #   PY_LDFLAGS=-L$(brew --prefix)/lib
          #   PY_OMP=1
          #   PY_CXXFLAGS_OMP="-I$(brew --prefix libomp)/include -fopenmp"
          #   PY_LDFLAGS_OMP="-L$(brew --prefix libomp)/lib -lomp"
          # # Switch to GCC compiler and OpenMP on macOS.
          # # HACK: Hardcode g++ compiler choice on recent GitHub macOS
          # # runners owing to unusual Homebrew paths. In the CIBW workflow,
          # # Homebrew 'fftw' formula installs g++-14 as a dependency which
          # # conflicts with the runner image.
          # CIBW_ENVIRONMENT_MACOS: >-
          #   PY_CXX=$(brew --prefix)/bin/g++-14
          #   PY_CXXFLAGS=-I$(brew --prefix)/include
          #   PY_LDFLAGS=-L$(brew --prefix)/lib
          #   PY_OMP=1
          # HACK: Hardcode macOS deployment target to align with the
          # GitHub runner image version. In the CIBW workflow,
          # Homebrew-installed libraries and `delocate-wheel` enforce this.
          # MACOSX_DEPLOYMENT_TARGET: ${{ env.IMAGE_VERSION }}
          # SYSTEM_VERSION_COMPAT: '0'
          MACOSX_DEPLOYMENT_TARGET: ${{ env.MACOSX_VERS_MIN }}
          SYSTEM_VERSION_COMPAT: '0'
          CIBW_ENVIRONMENT_MACOS: >-
            PY_CXX=clang++
            PY_CXXFLAGS=-Itmp/deps/include
            PY_LDFLAGS=-Ltmp/deps/lib
            PY_OMP=1
            PY_CXXFLAGS_OMP="-Xpreprocessor -fopenmp"
            PY_LDFLAGS_OMP="-Xpreprocessor -fopenmp"
            PY_BUILD_PARALLEL='-j'
            MACOSX_DEPLOYMENT_TARGET=${{ env.MACOSX_VERS_MIN }}
            SYSTEM_VERSION_COMPAT=0
          CIBW_BEFORE_ALL_MACOS:

      - name: Verify built distribution
        run: python -m twine check --strict dist/*

      - name: Save wheel to bdist
        uses: actions/upload-artifact@v4
        with:
          name: bdist_whl_${{ matrix.os }}_${{ github.ref_name }}
          path: dist/*.whl

      - name: Save wheel to pypi_dist
        uses: actions/upload-artifact@v4
        with:
          name: pypi_dist_${{ runner.os }}_${{ env.TARGET_ARCH }}_${{ github.ref_name }}
          path: dist/*.whl

  build_conda_xplat:
    name: Build Conda package

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]

    runs-on: ${{ matrix.os }}

    timeout-minutes: 120

    # Allow manual trigger from inputs
    # (skip automatic trigger with ``&& false``).
    if: >
      github.event_name != 'workflow_dispatch' ||
      github.event.inputs.run_build_conda_xplat == 'true'

    defaults:
      run:
        shell: bash -el {0}

    steps:
      - name: Extract platform architecture
        run: |
          if [[ $(uname -m) == 'arm64' ]]; then
            echo "TARGET_ARCH=x86_64" >> "${GITHUB_ENV}"
            echo "TARGET_ARCH_ALT=x86_64" >> "${GITHUB_ENV}"
          elif [[ $(uname -m) == 'x86_64' ]]; then
            echo "TARGET_ARCH=arm64" >> "${GITHUB_ENV}"
            echo "TARGET_ARCH_ALT=aarch64" >> "${GITHUB_ENV}"
          fi

      # HACK: GitHub macOS runner defaults to a broken release of Xcode.
      # See https://github.com/actions/runner-images/issues/9273.
      - name: Pin Xcode version (macOS only)
        if: runner.os == 'macOS'
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable

      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up (Mini)conda
        uses: conda-incubator/setup-miniconda@v3
        with:
          activate-environment: conda_bld
          channels: conda-forge
          channel-priority: strict
          # # Specify architecture.
          # architecture: ${{ env.TARGET_ARCH }}

      - name: Install packaging requirements
        run: |
          conda install -y conda-build conda-verify conda-package-handling
          # `cph` not found otherwise.
          conda_root=$(conda config --show root_prefix | sed 's/root_prefix: //')
          conda_env=${conda_root}/envs/conda_bld
          export PATH="$PATH:${conda_root}/bin:${conda_env}/bin"

      - name: Override version
        if: github.event_name == 'workflow_dispatch'
        uses: knicknic/os-specific-run@v1.0.4
        env:
          recipe_file: deploy/pkg/conda_recipe_xp/meta.yaml
        with:
          linux: |
            vers_tag=${{ github.event.inputs.version_tag }}
            if [[ ! -z ${vers_tag} ]]; then
              sed -i "s/# git_rev:.*/git_rev: ${vers_tag}/g" ${recipe_file}
            fi
          macos: |
            vers_tag=${{ github.event.inputs.version_tag }}
            if [[ ! -z ${vers_tag} ]]; then
              sed -i '' "s/# git_rev:.*/git_rev: ${vers_tag}/g" ${recipe_file}
            fi

      - name: Build Conda package
        env:
          recipe_dir: deploy/pkg/conda_recipe_xp
          output_dir: dist/
          variants: "{'python': ['3.10', '3.11', '3.12']}"
        run: |
          # Create output directory if non-existent.
          if [[ ! -d ${output_dir} ]]; then mkdir -p ${output_dir}; fi
          # Build.
          conda-build --strict-verify --no-anaconda-upload ${recipe_dir} \
            --variants "${variants}" --output-folder ${output_dir}
          # Transmute.
          find ${output_dir} -name '*.tar.bz2' \
            -exec cph transmute {} .conda --out-folder ${output_dir} \;

      - name: Save build to conda_bld
        uses: actions/upload-artifact@v4
        with:
          name: conda_bld_${{ matrix.os }}_${{ github.ref_name }}
          path: dist/*

      - name: Save build to conda_dist
        uses: actions/upload-artifact@v4
        with:
          name: conda_dist_${{ runner.os }}_${{ env.TARGET_ARCH }}_${{ github.ref_name }}
          path: |
            dist/**/*.tar.bz2
            dist/*.conda
